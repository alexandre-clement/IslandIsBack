package fr.unice.polytech.si3.qgl.iaad.strategy.naive;

import fr.unice.polytech.si3.qgl.iaad.contract.Contract;
import fr.unice.polytech.si3.qgl.iaad.decisions.Decision;
import fr.unice.polytech.si3.qgl.iaad.decisions.Exploit;
import fr.unice.polytech.si3.qgl.iaad.engine.Protocol;
import fr.unice.polytech.si3.qgl.iaad.format.Context;
import fr.unice.polytech.si3.qgl.iaad.format.Result;
import fr.unice.polytech.si3.qgl.iaad.map.Board;
import fr.unice.polytech.si3.qgl.iaad.resource.Basket;
import fr.unice.polytech.si3.qgl.iaad.resource.Resource;
import fr.unice.polytech.si3.qgl.iaad.resource.SimpleBasket;
import fr.unice.polytech.si3.qgl.iaad.results.ExploitResult;
import fr.unice.polytech.si3.qgl.iaad.utils.Crew;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * @author Alexandre Clement
 * @since 09/02/2017.
 */
class ExploitTile implements Protocol
{
    private final Context context;
    private final Board board;
    private final Crew crew;
    private final Resource resource;
    private Protocol exit;

    ExploitTile(Protocol exit, Context context, Board board, Crew crew, Resource resource)
    {
        this.exit = exit;
        this.context = context;
        this.board = board;
        this.crew = crew;
        this.resource = resource;
    }

    @Override
    public Decision takeDecision()
    {
        return new Exploit(resource);
    }

    @Override
    public Protocol acknowledgeResults(Result result)
    {
        ExploitResult exploitResult = new ExploitResult(result);
        Basket objective = getObjective();
        if (exploitResult.getAmount() > 0 && objective.contains(resource))
            exit = new ExploitTile(exit, context, board, crew, resource);

        crew.getBasket().add(resource, exploitResult.getAmount());

        Optional<Contract> complete = findCompleteContract();
        complete.ifPresent(this::completeContract);
        return exit;
    }

    private Optional<Contract> findCompleteContract()
    {
        Predicate<Contract> canBeCompleted = contract -> crew.getBasket().contains(contract.getReagentResources());
        Stream<Contract> contracts = context.getContracts().stream().filter(contract -> !contract.isComplete()).filter(canBeCompleted);
        return contracts.findFirst();
    }

    private void completeContract(Contract contract)
    {
        crew.getBasket().remove(contract.getReagentResources());
        if (!contract.isACraft())
            contract.collected(contract.getProductsResources().size());
        else
            exit = new TransformResource(exit, contract);
    }

    private Basket getObjective()
    {
        List<Basket> contracts = context.getContracts().stream().filter(contract -> !contract.isComplete()).map(Contract::getReagentResources).collect(Collectors.toList());
        Basket objective = new SimpleBasket();
        objective.addAll(contracts);
        return objective;
    }
}
