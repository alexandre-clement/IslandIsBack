package fr.unice.polytech.si3.qgl.iaad.strategy1;

import fr.unice.polytech.si3.qgl.iaad.decisions.Decision;
import fr.unice.polytech.si3.qgl.iaad.decisions.Exploit;
import fr.unice.polytech.si3.qgl.iaad.engine.Protocol;
import fr.unice.polytech.si3.qgl.iaad.format.Context;
import fr.unice.polytech.si3.qgl.iaad.format.Result;
import fr.unice.polytech.si3.qgl.iaad.map.GroundMap;
import fr.unice.polytech.si3.qgl.iaad.resource.Basket;
import fr.unice.polytech.si3.qgl.iaad.resource.Contract;
import fr.unice.polytech.si3.qgl.iaad.resource.Resource;
import fr.unice.polytech.si3.qgl.iaad.results.ExploitResult;

import java.util.Optional;

/**
 * @author Alexandre Clement
 * @since 09/02/2017.
 */
class ExploitTile implements Protocol
{
    private final Protocol exit;
    private final Context context;
    private final GroundMap map;
    private final Resource resource;

    ExploitTile(Protocol exit, Context context, GroundMap map, Resource resource)
    {
        this.exit = exit;
        this.context = context;
        this.map = map;
        this.resource = resource;
    }

    @Override
    public Decision takeDecision()
    {
        return new Exploit(resource);
    }

    @Override
    public Protocol acknowledgeResults(Result result)
    {
        ExploitResult exploitResult = new ExploitResult(result);
        Basket basket = map.getCrew().getBasket();
        basket.add(resource, exploitResult.getAmount());
        Optional<Contract> complete = findCompleteContract(basket);
        if (!complete.isPresent())
            return exit;

        basket.remove(complete.get().getBasket());

        if (complete.get().getResource().isCraft())
            return new TransformResource(exit, complete.get());
        complete.get().getBasket().clear();
        return exit;
    }

    private Optional<Contract> findCompleteContract(Basket basket)
    {
        return context.getContracts().stream().filter(contract -> !contract.complete()).filter(c -> basket.contains(c.getBasket())).findFirst();
    }
}
